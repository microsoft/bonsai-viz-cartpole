{"version":3,"sources":["../../microsoft-bonsai-visualizer/lib/index.js","CartpoleRenderer.tsx","CartpoleVisualizer.tsx","index.tsx"],"names":["Object","defineProperty","exports","value","ThemeMode","QueryParams","MessageType","CompatibleVersion","Version","zAxis","THREE","poleRadius","poleLength","cartWidth","cartHeight","cartDepth","wheelScale","poleColor","CartpoleRenderer","props","_container","_scene","_camera","_renderer","_pole","_cart","_poleMaterial","_wheels","_onMount","ref","_onWindowResize","width","window","innerWidth","height","innerHeight","aspect","updateProjectionMatrix","setSize","state","windowWidth","windowHeight","this","antialias","poleGeom","color","set","_getPoleColor","poleMesh","position","y","castShadow","add","OBJLoader","load","object","scale","traverse","child","name","material","copy","metalness","forEach","wheelInfo","wheel","clonedObj","clone","translateX","translateY","translateZ","push","cartGeom","cartMaterial","reflectivity","shininess","cartMesh","shadowMap","enabled","type","z","lookAt","loc","light","ambientLight","addEventListener","appendChild","domElement","removeEventListener","isModelValid","_render3DScene","backgroundColor","theme","background","polePos","model","Math","sin","abs","angle","setRotationFromAxisAngle","cartPos","rotateAngle","render","Component","CartpoleVisualizer","_receiveMessage","evt","messageStr","data","message","JSON","parse","err","semver","version","IterationUpdate","newState","undefined","velocity","setState","queryParams","URLSearchParams","location","search","initialTheme","_getInitialTheme","get","Theme","Dark","Light","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.38eee3e3.chunk.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ThemeMode = exports.QueryParams = exports.MessageType = exports.CompatibleVersion = exports.Version = void 0;\nexports.Version = '1.0.0';\nexports.CompatibleVersion = '1.x';\nvar MessageType;\n(function (MessageType) {\n    MessageType[\"IterationUpdate\"] = \"IterationUpdate\";\n})(MessageType = exports.MessageType || (exports.MessageType = {}));\nvar QueryParams;\n(function (QueryParams) {\n    QueryParams[\"Theme\"] = \"_theme\";\n    QueryParams[\"Context\"] = \"_context\";\n    QueryParams[\"PrefsKey\"] = \"_prefsKey\";\n    QueryParams[\"Lang\"] = \"_lang\";\n})(QueryParams = exports.QueryParams || (exports.QueryParams = {}));\nvar ThemeMode;\n(function (ThemeMode) {\n    ThemeMode[\"Light\"] = \"light\";\n    ThemeMode[\"Dark\"] = \"dark\";\n})(ThemeMode = exports.ThemeMode || (exports.ThemeMode = {}));\n","/*\n * CartpoleRenderer.tsx\n * Copyright: Microsoft 2019\n *\n * Renders the cart and pole in 3D.\n */\n\nimport React, { Component } from \"react\";\nimport * as THREE from \"three\";\nimport { OBJLoader } from \"three/examples/jsm/loaders/OBJLoader\";\n\nimport { CartpoleModel } from \"./CartpoleModel\";\n\ninterface CartpoleRendererProps {\n  theme: \"light\" | \"dark\";\n  isModelValid: boolean;\n  model: CartpoleModel;\n}\n\ninterface MoabRendererState {}\n\nconst zAxis = new THREE.Vector3(0, 0, 1);\nconst poleRadius = 0.01;\nconst poleLength = 0.25;\nconst cartWidth = 0.2;\nconst cartHeight = 0.02;\nconst cartDepth = 0.08;\nconst wheelRadius = 0.045;\nconst wheelScale = 0.00125;\nconst poleColor = [0.22, 0.3, 0.38];\n\nexport class CartpoleRenderer extends Component<\n  CartpoleRendererProps,\n  MoabRendererState\n> {\n  private _container: HTMLDivElement | null = null;\n  private _scene?: THREE.Scene;\n  private _camera?: THREE.PerspectiveCamera;\n  private _renderer?: THREE.WebGLRenderer;\n  private _pole?: THREE.Object3D;\n  private _cart?: THREE.Object3D;\n  private _poleMaterial?: THREE.MeshLambertMaterial;\n  private _wheels: THREE.Object3D[] = [];\n\n  constructor(props: CartpoleRendererProps) {\n    super(props);\n\n    this.state = {};\n  }\n\n  componentDidMount(): void {\n    const windowWidth = window.innerWidth;\n    const windowHeight = window.innerHeight;\n    this._renderer = new THREE.WebGLRenderer({ antialias: true });\n    this._scene = new THREE.Scene();\n\n    // Create the pole.\n    const poleGeom = new THREE.CylinderGeometry(\n      poleRadius,\n      poleRadius,\n      poleLength,\n      32\n    );\n    this._poleMaterial = new THREE.MeshLambertMaterial({});\n    this._poleMaterial.color.set(this._getPoleColor());\n    const poleMesh = new THREE.Mesh(poleGeom, this._poleMaterial);\n    poleMesh.position.y = poleLength / 2;\n    this._pole = new THREE.Object3D();\n    this._pole.castShadow = true;\n    this._pole.add(poleMesh);\n    this._scene.add(this._pole);\n\n    const objLoader = new OBJLoader();\n    objLoader.load(\"wheel.obj\", (object) => {\n      object.scale.set(wheelScale, wheelScale, wheelScale);\n\n      object.traverse((child) => {\n        if (child.name === \"plastic\") {\n          const material = (child as THREE.Mesh)\n            .material as THREE.MeshStandardMaterial;\n          material.color.copy(new THREE.Color(\"#666666\"));\n          material.metalness = 1.0;\n        }\n        if (child.name === \"rubber\") {\n          const material = (child as THREE.Mesh)\n            .material as THREE.MeshStandardMaterial;\n          material.color.copy(new THREE.Color(\"#111111\"));\n        }\n      });\n\n      this._cart = new THREE.Object3D();\n      this._scene!.add(this._cart);\n\n      const wheelInfo = [\n        [cartWidth * 0.3, cartDepth * 0.675],\n        [-cartWidth * 0.3, cartDepth * 0.675],\n        [cartWidth * 0.3, -cartDepth * 0.675],\n        [-cartWidth * 0.3, -cartDepth * 0.675],\n      ];\n\n      wheelInfo.forEach((wheelInfo) => {\n        const wheel = new THREE.Object3D();\n        const clonedObj = object.clone();\n        wheel.add(clonedObj);\n        wheel.translateX(wheelInfo[0]);\n        wheel.translateY(-cartHeight * 0.5);\n        wheel.translateZ(wheelInfo[1]);\n        this._wheels.push(wheel);\n        this._cart!.add(wheel);\n      });\n\n      // Create the cart.\n      const cartGeom = new THREE.BoxGeometry(cartWidth, cartHeight, cartDepth);\n      const cartMaterial = new THREE.MeshPhongMaterial({\n        color: new THREE.Color(0.3, 0.3, 0.3),\n        reflectivity: 1.0,\n        shininess: 150,\n      });\n      const cartMesh = new THREE.Mesh(cartGeom, cartMaterial);\n      this._cart.add(cartMesh);\n\n      // Set up the renderer.\n      this._renderer!.setSize(windowWidth, windowHeight);\n      this._renderer!.shadowMap.enabled = true;\n      this._renderer!.shadowMap.type = THREE.PCFSoftShadowMap;\n\n      // Set up the camera.\n      this._camera = new THREE.PerspectiveCamera(\n        40,\n        windowWidth / windowHeight,\n        0.1,\n        1000\n      );\n      this._camera.position.z = 0.5;\n      this._camera.position.y = poleLength / 2;\n      this._camera.lookAt(0, poleLength / 2 - cartHeight, 0);\n\n      // Set up point lights.\n      const locations = [\n        [-0.25, poleLength * 2, 0],\n        [0.25, poleLength * 2, 0],\n      ];\n      locations.forEach((loc) => {\n        const light = new THREE.PointLight(0xffffff, 0.85, 50, 1.25);\n        light.position.set(loc[0], loc[1], loc[2]);\n        light.lookAt(0, 0, 0);\n        this._scene!.add(light);\n      });\n\n      // Set up ambient light.\n      const ambientLight = new THREE.AmbientLight(0xffffff, 1.5);\n      this._scene!.add(ambientLight);\n\n      // Install handlers\n      window.addEventListener(\"resize\", this._onWindowResize, false);\n\n      this._container!.appendChild(this._renderer!.domElement);\n    });\n  }\n\n  componentWillUnmount(): void {\n    // Uninstall handlers.\n    window.removeEventListener(\"resize\", this._onWindowResize);\n  }\n\n  render(): JSX.Element {\n    if (this.props.isModelValid) {\n      this._render3DScene();\n    }\n    return <div ref={(ref) => this._onMount(ref)} />;\n  }\n\n  private _getPoleColor(): THREE.Color {\n    return new THREE.Color(poleColor[0], poleColor[1], poleColor[2]);\n  }\n\n  private _render3DScene(): void {\n    if (\n      !this._scene ||\n      !this._pole ||\n      !this._cart ||\n      !this._renderer ||\n      !this._camera\n    ) {\n      return;\n    }\n\n    const backgroundColor = this.props.theme === \"light\" ? 0xffffff : 0x1a1a1a;\n    this._scene.background = new THREE.Color(backgroundColor);\n\n    // Set pole position based on model. We add a small y value to account\n    // for the fact that the base of the pole is flat, so when it starts\n    // to fall over, it needs to move up a bit.\n    const polePos = new THREE.Vector3(\n      this.props.model.state.position,\n      Math.sin(Math.abs(this.props.model.state.angle)) * poleRadius,\n      0\n    );\n    this._pole.position.copy(polePos);\n    this._pole.setRotationFromAxisAngle(zAxis, -this.props.model.state.angle);\n\n    const cartPos = new THREE.Vector3(\n      this.props.model.state.position,\n      -cartHeight / 2,\n      0\n    );\n    this._cart.position.copy(cartPos);\n\n    // Rotate the wheels.\n    const rotateAngle = -this.props.model.state.position / wheelRadius;\n    this._wheels.forEach((wheel) => {\n      wheel.setRotationFromAxisAngle(zAxis, rotateAngle);\n    });\n\n    // Render scene.\n    this._renderer.render(this._scene, this._camera);\n  }\n\n  private _onMount = (ref: HTMLDivElement | null) => {\n    this._container = ref;\n  };\n\n  private _onWindowResize = () => {\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n\n    if (!this._camera || !this._renderer) {\n      return;\n    }\n\n    this._camera.aspect = width / height;\n    this._camera.updateProjectionMatrix();\n    this._renderer.setSize(width, height);\n  };\n}\n","/*\n * CartpoleVisualizer.tsx\n * Copyright: Microsoft 2019\n *\n * Visualizer app for the cartpole simulator.\n */\n\nimport {\n  CompatibleVersion,\n  IterationUpdateMessage,\n  MessageType,\n  QueryParams,\n  ThemeMode,\n} from \"microsoft-bonsai-visualizer\";\nimport React, { Component } from \"react\";\nimport * as semver from \"semver\";\n\nimport { CartpoleModel } from \"./CartpoleModel\";\nimport { CartpoleRenderer } from \"./CartpoleRenderer\";\n\ninterface CartpoleVisualizerProps {}\n\ninterface CartpoleVisualizerState {\n  theme: ThemeMode;\n  isModelValid: boolean;\n  model: CartpoleModel;\n}\n\nexport default class CartpoleVisualizer extends Component<\n  CartpoleVisualizerProps,\n  CartpoleVisualizerState\n> {\n  constructor(props: CartpoleVisualizerProps) {\n    super(props);\n\n    const queryParams = new URLSearchParams(window.location.search);\n    const initialTheme = this._getInitialTheme(queryParams);\n\n    this.state = {\n      theme: initialTheme,\n      isModelValid: true,\n      model: {\n        state: {\n          position: 0,\n          velocity: 0,\n          angle: 0,\n        },\n      },\n    };\n  }\n\n  componentDidMount(): void {\n    window.addEventListener(\"message\", this._receiveMessage);\n  }\n\n  componentWillUnmount(): void {\n    window.removeEventListener(\"message\", this._receiveMessage);\n  }\n\n  render(): JSX.Element {\n    return (\n      <CartpoleRenderer\n        theme={this.state.theme}\n        isModelValid={this.state.isModelValid}\n        model={this.state.model}\n      />\n    );\n  }\n\n  private _receiveMessage = (evt: Event) => {\n    if (evt.type !== \"message\") {\n      return;\n    }\n\n    const messageStr = (evt as any).data;\n    if (typeof messageStr !== \"string\") return;\n\n    let message: IterationUpdateMessage;\n    try {\n      message = JSON.parse(messageStr);\n    } catch (err) {\n      return;\n    }\n    if (!semver.satisfies(message.version, CompatibleVersion)) {\n      return;\n    }\n    if (message.type !== MessageType.IterationUpdate) {\n      return;\n    }\n\n    let newState: CartpoleVisualizerState;\n\n    // Old cartpole sim?\n    const state = message.state as { [key: string]: any };\n    if (state[\"position\"] !== undefined) {\n      newState = {\n        theme: this.state.theme,\n        isModelValid: true,\n        model: {\n          state: {\n            position: state[\"position\"],\n            velocity: state[\"velocity\"],\n            angle: state[\"angle\"],\n          },\n        },\n      };\n      // Less old cartpole sim\n    } else if (state[\"x\"] !== undefined) {\n      newState = {\n        theme: this.state.theme,\n        isModelValid: true,\n        model: {\n          state: {\n            position: state[\"x\"],\n            velocity: state[\"x_dot\"],\n            angle: state[\"theta\"],\n          },\n        },\n      };\n      // Newest cartpole sim\n    } else {\n      newState = {\n        theme: this.state.theme,\n        isModelValid: true,\n        model: {\n          state: {\n            position: state[\"cart_position\"],\n            velocity: state[\"cart_velocity\"],\n            angle: state[\"pole_angle\"],\n          },\n        },\n      };\n    }\n\n    this.setState(newState);\n  };\n\n  private _getInitialTheme(queryParams: URLSearchParams): ThemeMode {\n    const theme = queryParams.get(QueryParams.Theme);\n    return theme === ThemeMode.Dark ? ThemeMode.Dark : ThemeMode.Light;\n  }\n}\n","/*\n * index.tsx\n * Copyright: Microsoft 2019\n *\n * Main page for cartpole simulator visualizer.\n */\n\nimport \"./index.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport CartpoleVisualizer from \"./CartpoleVisualizer\";\n\nReactDOM.render(<CartpoleVisualizer />, document.getElementById(\"root\"));\n"],"sourceRoot":""}